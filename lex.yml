if(ft_strchr(cmdline, '<'))
	{
		t_heredoc *hd;
		hd = malloc(sizeof(t_heredoc));
		while(1)
		{
			hd->hd_term = readline("heredoc> ");
			hd->heredoc = ft_strjoin(hd->heredoc, hd->hd_term);
			if(ft_strchr(hd->hd_term, '{'))
				break;
			hd->heredoc = ft_strjoin(hd->heredoc, "\n");
		}
		printf("%s\n", hd->heredoc); 
	}

	int main(void)
{
	 id1 = fork(){
		 id1 = ?
		 main = parentProcessId
		 id2 = fork(){
			 id1 = parentProcessId
			 id2 = ?
			 printf("ok");
		 }
		 printf("ok");
	 }
	 id2 = fork(){
		 id1 = parentProcessId
		 printf("ok");
	 }

	 printf("ok");
}


static int char_by_char(char *tok, char *cmdline, int *j, int *c, int *count);

// int char_by_char(char *tok, char *cmdline, int *j, int *c, int *count)
// {
// 	int flag;

// 	flag = 0;
// 	while(tok[*c])
// 	{
// 		if(cmdline[*j] == tok[*c])
// 		{
// 			++count;
// 			flag++;
// 			j++;
// 		}
// 		c++;
// 	}
// 	// printf("%s : %s\n", tok, cmdline);
// 	return (flag);
// }



token_replacment(cmdline, '\'', '\a');
	// cmdline = find_replace(cmdline, (*table)->env);
	printf("%s\n", cmdline);
	token_replacment(cmdline, '\a', '\'');
	printf("%s\n", cmdline);




// int main(int ac, char *av[], char **envp)
// {
// 	const char *CAP_LETTERS;
// 	const char *SML_LETTERS;
// 	CAP_LETTERS = "A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z";
// 	SML_LETTERS = "a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z";
// 	char **lex = ft_split(CAP_LETTERS, '|');
// 	int i = -1;
// 	while(envp[++i])
// 		printf("%s\n", envp[i]);
// }



if(contains("<<", cmdline, &pos))
	{
		int end;
		
		end = find_space_orpipe(cmdline+pos);
		(*table)->heredoc->delimiter = ft_substr(cmdline, pos, end);
		printf("%s\n", (*table)->heredoc->delimiter);
	}



int contains(char *tok, char *cmdline)
{
	// tok -> |
	// cmdline -> abc | x=
	int i;
	int c;
	int j;
	int len;
	int flag;

	i = -1;
	len = ft_strlen(tok);
	while(cmdline[++i])
	{
		c = -1;
		j = i;
		if(cmdline[j] == tok[++c])
		{
			flag = 1;
			while(tok[c + 1] != '\0' && tok[++c])
				if(cmdline[++j] == tok[c])
					flag++;
			printf("flag: %d\n", flag);
			printf("len: %d\n", len);
			if(flag == len && cmdline[++j] != tok[c])
			{
				printf("c: %d\n", c);
				printf("cmdline[++j]: %c\n", cmdline[j]);
				printf("tok[c]: %c\n", tok[c]);
				printf("return 1\n");
				return (1);
			}
		}
	}
	return (0);
}


//finished but have a mistakes
int contains(char *tok, char *cmdline, int *pos)
{
	int i;
	int c;
	int j;
	int len;
	int flag;

	i = -1;
	len = ft_strlen(tok);
	while(cmdline[++i])
	{
		c = 0;
		j = i;
		if(cmdline[j] == tok[c])
		{
			flag = 0;
			while(tok[c])
			{
				if(cmdline[j] == tok[c])
				{
					flag++;
					j++;
				}
				c++;
			}
			if(cmdline[j] == tok[c - 1])
			{
				i = j;
				continue;
			}
			if(flag == len)
			{
				*pos = j;
				return (1);
			}
			i = j;
		}
	}
	return (0);
}